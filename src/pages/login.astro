---
import Layout from '../layouts/Layout.astro';
import { createSupabaseServerClient } from '../lib/supabaseServer';

const supabase = createSupabaseServerClient(Astro.cookies);
const { data: { user } } = await supabase.auth.getUser();

if (user) {
  // Redirect logged-in users away from login page
  return Astro.redirect('/');
}
---

<Layout title="VideoHub - Iniciar Sesión" showHeader={false}>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    }

    body {
      background: #000000;
    }

    .minimal-gradient {
      background: radial-gradient(circle at center, #0a0a0a 0%, #000000 70%);
    }

    .glass-effect {
      background: rgba(255, 255, 255, 0.03);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.08);
    }

    .glass-button {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(15px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .glass-button:hover {
      background: rgba(255, 255, 255, 0.08);
      border-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-1px);
    }

    .glass-input {
      background: rgba(255, 255, 255, 0.02);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.06);
      transition: all 0.3s ease;
    }

    .glass-input:focus {
      background: rgba(255, 255, 255, 0.04);
      border-color: rgba(255, 255, 255, 0.15);
      box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.1);
    }

    .primary-button {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.15);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .primary-button:hover {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.08) 100%);
      border-color: rgba(255, 255, 255, 0.25);
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .floating-orb {
      position: absolute;
      border-radius: 50%;
      background: radial-gradient(circle, rgba(255, 255, 255, 0.01) 0%, transparent 70%);
      animation: float 8s ease-in-out infinite;
      pointer-events: none;
    }

    .floating-orb:nth-child(1) {
      width: 300px;
      height: 300px;
      top: -150px;
      left: -150px;
      animation-delay: 0s;
    }

    .floating-orb:nth-child(2) {
      width: 200px;
      height: 200px;
      top: 20%;
      right: -100px;
      animation-delay: 2s;
    }

    .floating-orb:nth-child(3) {
      width: 250px;
      height: 250px;
      bottom: -125px;
      left: 30%;
      animation-delay: 4s;
    }

    @keyframes float {
      0%, 100% { 
        transform: translateY(0px) rotate(0deg); 
        opacity: 0.3;
      }
      50% { 
        transform: translateY(-30px) rotate(180deg); 
        opacity: 0.1;
      }
    }

    .fade-in {
      animation: fadeIn 0.8s ease-out forwards;
      opacity: 0;
    }

    .fade-in-delay {
      animation: fadeIn 0.8s ease-out 0.2s forwards;
      opacity: 0;
    }

    @keyframes fadeIn {
      from { 
        opacity: 0; 
        transform: translateY(20px); 
      }
      to { 
        opacity: 1; 
        transform: translateY(0); 
      }
    }

    .icon-glow {
      filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.1));
    }

    .text-shadow {
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 6px;
    }

    ::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.02);
    }

    ::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 3px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.2);
    }
  </style>
  
  <!-- Minimal Floating Elements -->
  <div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="floating-orb"></div>
    <div class="floating-orb"></div>
    <div class="floating-orb"></div>
  </div>

  <div class="minimal-gradient min-h-screen flex items-center justify-center px-4 py-8">
    <div class="w-full max-w-sm">
      
      <!-- Minimal Brand -->
      <div class="text-center mb-12 fade-in">
        <div class="inline-flex items-center justify-center mb-6">
          <div class="glass-effect p-3 rounded-2xl">
            <svg class="w-8 h-8 text-white icon-glow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </div>
        </div>
        <h1 class="text-2xl font-light text-white mb-2 text-shadow">VideoHub</h1>
        <p class="text-gray-400 text-sm font-light">Tu plataforma de entretenimiento</p>
      </div>

      <!-- Alert Message -->
      <div id="message" class="hidden mb-6 fade-in">
        <div class="glass-effect p-4 rounded-xl">
          <div class="flex items-center text-sm">
            <svg id="messageIcon" class="w-4 h-4 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.766 0L3.048 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <span id="messageText" class="font-medium"></span>
          </div>
        </div>
      </div>

      <!-- Login Form Container -->
      <div class="glass-effect rounded-2xl p-6 fade-in-delay">
        
        <!-- Form Header -->
        <div class="text-center mb-8">
          <h2 class="text-xl font-medium text-white mb-1">Iniciar Sesión</h2>
          <p class="text-gray-500 text-sm font-light">Accede a tu cuenta</p>
        </div>

        <!-- Auth Form -->
        <form id="authForm" class="space-y-5" method="POST" action="/api/auth/signin">
          
          <!-- Email Input -->
          <div class="space-y-2">
            <label for="email" class="block text-sm font-medium text-gray-300">
              Email
            </label>
            <div class="relative">
              <input
                type="email"
                id="email"
                name="email"
                required
                class="glass-input w-full px-4 py-3 rounded-xl text-white placeholder-gray-500 text-sm focus:outline-none"
                placeholder="tu@email.com"
              />
              <svg class="w-4 h-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
              </svg>
            </div>
          </div>

          <!-- Password Input -->
          <div class="space-y-2">
            <label for="password" class="block text-sm font-medium text-gray-300">
              Contraseña
            </label>
            <div class="relative">
              <input
                type="password"
                id="password"
                name="password"
                required
                class="glass-input w-full px-4 py-3 rounded-xl text-white placeholder-gray-500 text-sm focus:outline-none"
                placeholder="Tu contraseña"
              />
              <button type="button" id="togglePassword" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-300 transition-colors focus:outline-none">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Remember Me -->
          <div class="flex items-center justify-between">
            <label class="flex items-center">
              <input type="checkbox" id="remember" class="w-4 h-4 rounded bg-white/5 border border-white/10 text-white focus:ring-white/20 focus:ring-2">
              <span class="ml-2 text-sm text-gray-400">Recordar</span>
            </label>
            <a href="#" class="text-sm text-gray-400 hover:text-white transition-colors">
              ¿Olvidaste tu contraseña?
            </a>
          </div>

          <!-- Submit Button -->
          <button
            type="submit"
            id="submitBtn"
            class="primary-button w-full text-white font-medium py-3 px-4 rounded-xl focus:outline-none relative overflow-hidden"
          >
            <span id="submitText" class="flex items-center justify-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
              </svg>
              Ingresar
            </span>
            <div id="loadingIcon" class="absolute inset-0 flex items-center justify-center hidden">
              <svg class="animate-spin w-5 h-5 text-white" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </div>
          </button>
        </form>

        <!-- Back to Home -->
        <div class="mt-6 text-center">
          <a href="/" class="inline-flex items-center text-gray-500 hover:text-gray-300 transition-colors text-sm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Volver al inicio
          </a>
        </div>
      </div>

      <!-- Minimal Footer -->
      <div class="text-center mt-8 text-gray-600 text-xs fade-in">
        <p>&copy; 2024 VideoHub. Todos los derechos reservados.</p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('authForm') as HTMLFormElement;
      const emailInput = document.getElementById('email') as HTMLInputElement;
      const passwordInput = document.getElementById('password') as HTMLInputElement;
      const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
      const submitText = document.getElementById('submitText') as HTMLSpanElement;
      const loadingIcon = document.getElementById('loadingIcon') as HTMLElement;
      const messageDiv = document.getElementById('message') as HTMLDivElement;
      const messageText = document.getElementById('messageText') as HTMLSpanElement;
      const messageIcon = document.getElementById('messageIcon') as HTMLElement;
      const togglePassword = document.getElementById('togglePassword') as HTMLButtonElement;

      // Check for error parameters in URL
      const urlParams = new URLSearchParams(window.location.search);
      const error = urlParams.get('error');

      if (error) {
        let errorMessage = '';
        switch (error) {
          case 'invalid_credentials':
            errorMessage = 'Credenciales inválidas. Verifica tu email y contraseña.';
            break;
          case 'email_not_confirmed':
            errorMessage = 'Por favor confirma tu email antes de iniciar sesión.';
            break;
          case 'missing_credentials':
            errorMessage = 'Por favor completa todos los campos.';
            break;
          case 'no_session':
            errorMessage = 'Error al crear la sesión. Inténtalo de nuevo.';
            break;
          case 'server_error':
            errorMessage = 'Error interno del servidor. Inténtalo de nuevo.';
            break;
          case 'unsupported_content_type':
            errorMessage = 'Error en el formato de los datos enviados.';
            break;
          default:
            errorMessage = 'Ha ocurrido un error. Inténtalo de nuevo.';
        }
        showMessage(errorMessage, 'error');
        // Clean URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }

      // Toggle password visibility
      if (togglePassword) {
        togglePassword.addEventListener('click', () => {
          const type = passwordInput?.type === 'password' ? 'text' : 'password';
          if (passwordInput) passwordInput.type = type;
          const icon = togglePassword?.querySelector('svg path:last-child') as SVGPathElement;
          if (icon && type === 'text') {
            icon.setAttribute('d', 'M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21');
          } else if (icon) {
            icon.setAttribute('d', 'M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z');
          }
        });
      }

      // Form submission handling
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          setLoading(true);
          hideMessage();

          const formData = new FormData(form);
          const email = formData.get('email') as string;
          const password = formData.get('password') as string;

          if (!email || !password) {
            showMessage('Por favor completa todos los campos', 'error');
            setLoading(false);
            return;
          }

          try {
            const response = await fetch('/api/auth/signin', {
              method: 'POST',
              body: formData,
            });

            if (response.redirected) {
              window.location.href = response.url;
              return;
            }

            if (response.ok) {
              showMessage('Inicio de sesión exitoso. Redirigiendo...', 'success');
              setTimeout(() => {
                window.location.href = '/dashboard';
              }, 1000);
            } else {
              const errorText = await response.text();
              showMessage(errorText || 'Error en la autenticación', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showMessage('Error de conexión. Inténtalo de nuevo.', 'error');
          } finally {
            setLoading(false);
          }
        });
      }

      function setLoading(loading: boolean) {
        if (submitBtn) submitBtn.disabled = loading;
        if (loading) {
          if (submitText) submitText.classList.add('opacity-0');
          if (loadingIcon) loadingIcon.classList.remove('hidden');
          if (submitBtn) submitBtn.classList.add('cursor-not-allowed');
        } else {
          if (submitText) submitText.classList.remove('opacity-0');
          if (loadingIcon) loadingIcon.classList.add('hidden');
          if (submitBtn) submitBtn.classList.remove('cursor-not-allowed');
        }
      }

      function showMessage(text: string, type: 'success' | 'error') {
        if (messageDiv && messageText && messageIcon) {
          messageText.textContent = text;
          
          if (type === 'error') {
            messageText.className = 'font-medium text-red-300';
            messageIcon.className = 'w-4 h-4 mr-3 flex-shrink-0 text-red-400';
          } else {
            messageText.className = 'font-medium text-green-300';
            messageIcon.className = 'w-4 h-4 mr-3 flex-shrink-0 text-green-400';
          }
          
          messageDiv.classList.remove('hidden');
        }
      }

      function hideMessage() {
        if (messageDiv) messageDiv.classList.add('hidden');
      }
    });
  </script>
</Layout>