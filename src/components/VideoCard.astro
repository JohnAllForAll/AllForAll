---
export interface Props {
  video: {
    id: string;
    title: string;
    description?: string;
    thumbnail_url?: string;
    video_url?: string;
    duration?: string;
    views?: number;
    created_at: string;
  };
}

const { video } = Astro.props;
---

<div class="group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:z-10">
  <div class="relative overflow-hidden rounded-lg mb-3 aspect-[2/3]">
    <img
      src={video.thumbnail_url || 'https://via.placeholder.com/300x450/1f2937/ffffff?text=Video'}
      alt={video.title}
      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
      data-fallback-src="https://via.placeholder.com/300x450/1f2937/ffffff?text=Video"
    />
    
    <!-- Play Button Overlay -->
    <div class="absolute inset-0 bg-transparent group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center">
      <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 transform scale-75 group-hover:scale-100">
        <div class="bg-red-600 rounded-full p-4 shadow-lg">
          <i class="fas fa-play text-white text-2xl ml-1"></i>
        </div>
      </div>
    </div>
    
    <!-- Duration Badge -->
    {video.duration && (
      <div class="absolute bottom-2 right-2 bg-black bg-opacity-80 text-white text-xs px-2 py-1 rounded font-medium">
        {video.duration}
      </div>
    )}
    
    <!-- Quality Badge -->
    <div class="absolute top-2 left-2 bg-red-600 text-white text-xs px-2 py-1 rounded font-bold">
      HD
    </div>
  </div>
  
  <div class="px-2">
    <h3 class="text-white font-semibold text-base mb-2 line-clamp-2 group-hover:text-red-400 transition-colors leading-tight">
      {video.title}
    </h3>
    
    {video.description && (
      <p class="text-gray-400 text-sm mb-3 line-clamp-2 leading-relaxed">
        {video.description}
      </p>
    )}
    
    <div class="flex items-center justify-between text-gray-500 text-xs">
      <div class="flex items-center space-x-3">
        <span class="flex items-center">
          <i class="fas fa-eye mr-1"></i>
          {video.views ? `${video.views.toLocaleString()}` : '0'}
        </span>
        <span class="flex items-center">
          <i class="fas fa-calendar mr-1"></i>
          {new Date(video.created_at).toLocaleDateString('es-ES', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
          })}
        </span>
      </div>
      
      <!-- Action Buttons -->
      <div class="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        <button class="text-gray-400 hover:text-red-500 transition-colors p-2 flex items-center space-x-1 text-xs">
          <i class="fas fa-heart"></i>
          <span>Favorito</span>
        </button>
        <button class="text-gray-400 hover:text-white transition-colors p-2 flex items-center space-x-1 text-xs">
          <i class="fas fa-share"></i>
          <span>Compartir</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Add error handling for images and click handler for videos
  document.addEventListener('DOMContentLoaded', () => {
    // Handle image loading errors
    const images = document.querySelectorAll('img[data-fallback-src]');
    images.forEach(img => {
      const htmlImg = img as HTMLImageElement;
      const fallbackSrc = img.getAttribute('data-fallback-src');

      htmlImg.addEventListener('error', function() {
        if (fallbackSrc) {
          this.src = fallbackSrc;
        }
      });
    });

    // Add click handler to make videos clickable
    const videoCards = document.querySelectorAll('.group.cursor-pointer');

    videoCards.forEach(card => {
      card.addEventListener('click', (e) => {
        // Get video data from the parent container
        const container = card.closest('[data-video-url]');
        const title = card.querySelector('h3')?.textContent;
        const videoUrl = container?.getAttribute('data-video-url');

        if (videoUrl && videoUrl !== 'null' && videoUrl !== '') {
          // Open video in new tab or modal
          window.open(videoUrl, '_blank');
        } else {
          // Show placeholder modal for demo
          alert(`Reproduciendo: ${title}\n\nEn una implementación real, aquí se abriría el reproductor de video.`);
        }
      });
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
